#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;

public static bool isSoftStopRequested = false;

#!csharp

public interface ICommand
{
    void Execute();
}

#!csharp

public class HardStop : ICommand
{
    private Thread stoppingThread;

    public HardStop(Thread stoppingThread)
    {
        this.stoppingThread = stoppingThread;
    }

    public void Execute()
    {
        if (stoppingThread != Thread.CurrentThread)
        {
            throw new Exception("HardStop cannot be executed in non-target thread");
        }
        stoppingThread.Interrupt();
    }
}

#!csharp

public class SoftStop : ICommand
{
    private BlockingCollection<ICommand> commandQueue;
    private Thread stoppingThread;

    public SoftStop(BlockingCollection<ICommand> commandQueue, Thread stoppingThread)
    {
        this.commandQueue = commandQueue;
        this.stoppingThread = stoppingThread;
    }

    public void Execute()
    {
        if (stoppingThread != Thread.CurrentThread)
        {
            throw new Exception("SoftStop cannot be executed in non-target thread");
        }

        if(isSoftStopRequested){
        while (commandQueue.Count > 0)
            {
                ICommand command = commandQueue.Take();
                command.Execute();
            }
        }
    }
}

#!csharp

public interface IScheduler
{
    bool HasCommand();
    ICommand Select();
    void Add(ICommand cmd);
}

#!csharp

public class Scheduler : IScheduler
{
    public BlockingCollection<ICommand> longCommandQueue = new BlockingCollection<ICommand>();
    
    public bool HasCommand(){
        if(longCommandQueue.Count > 0) return true;
        else return false;
    }

    public ICommand Select()
    {
        return longCommandQueue.Take();
    }

    public void Add(ICommand command){
        longCommandQueue.Add(command);
    }

    public void ExecuteLongCommand(BlockingCollection<ICommand> longCommandQueue){
        while(HasCommand())
        {
            Select().Execute();
        }
    }
}

#!csharp

public static class ExceptionHandler
{
    public static void Handle(Exception exception, ICommand command){
        Console.WriteLine("Exception " + exception + " caught while trying to execute next command: " + command.GetType().Name);
    }
}

#!csharp

public class ServerThread
{
    public BlockingCollection<ICommand> commandQueue = new BlockingCollection<ICommand>();

    public Thread mainThread;

    public Scheduler scheduler = new Scheduler();

    public ServerThread()
    {
        mainThread = new Thread(Run);

        mainThread.Start();
    }

    public void Run()
    {

        while ((commandQueue.Count > 0) && (!isSoftStopRequested))
        {
            ICommand command = commandQueue.Take();
            try
            {
                if(command is SoftStop){
                     isSoftStopRequested = true;
                     break;
                } else if (command is HardStop) break;
                command.Execute();
                
            }
            catch (Exception exception)
            {
                ExceptionHandler.Handle(exception, command);
            }
        }

        while (scheduler.HasCommand())
        {
            ICommand nextCommand = scheduler.Select();
            try
            {
                nextCommand.Execute();
            }
            catch (Exception exception)
            {
                ExceptionHandler.Handle(exception, nextCommand);
            }
        }
    }

    public void AddCommand(ICommand command)
    {
        commandQueue.Add(command);
    }
}

#!csharp

public class TestCommand : ICommand
{
    public void Execute()
    {
        Console.WriteLine("Server is doing smth...");
    }
}

#!csharp

public class LongTestCommand : ICommand
{
    public void Execute()
    {
        Console.WriteLine("Server is doing smth long...");
        Thread.Sleep(2000);
    }
}

#!csharp

ServerThread serverThread = new ServerThread();

serverThread.AddCommand(new TestCommand());
serverThread.AddCommand(new TestCommand());
serverThread.AddCommand(new LongTestCommand());

try
{
    serverThread.AddCommand(new HardStop(serverThread.mainThread));
}
catch(Exception exception)
{
    Console.WriteLine(exception.Message);
}

//serverThread.AddCommand(new SoftStop(serverThread.commandQueue, serverThread.mainThread));

serverThread.AddCommand(new TestCommand());

serverThread.mainThread.Join();
