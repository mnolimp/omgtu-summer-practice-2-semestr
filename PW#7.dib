#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №7.Реализация потока обработки команад.

**Цель:** Реализовать основу для многопоточного сервера приложений.

**Результаты:** После выполнения работы Вы сможете:
1. Обрабатывать множество операций в несколько потоков.
2. Останавливать потоки по запросу извне.

## Задание.
Пусть операция задана интерфейсом

#!markdown

Классы, наследующие интерйес ICommand будем называть **Командами.**

Реализовать класс ServerThread и команды по hard и soft завершению потока. 

ServerThread может менять свое поведение для обработки следующей Команды.
Исключение, выброшенное из Команды, перехватывается и передается вместе с самой Командой в ExceptionHandler (см. ЛР №5) Примечание. Наличие реализованного обработчика исключений не обязательно для выполнения данной задачи. 

Команда HardStop приводит к немедленной остановке потока, несмотря на, что в очереди потока есть еще Команды.
Команда  SoftStop останавливает поток, когда в очереди потока закончатся все Команды.

Команды HardStop и SoftStop успешно выполняются только в потоке, который они должны остановить, в противном случае выбрасывают исключение.
Отсутствие Команд в очереди потока не должно требовать значительных затрат процессорного времени. Значительными считаются затраты, которые зависят от времени простоя потока.

Написать проверку, которая гарантирует правильное выполнение команд HardStop и SoftStop.

#!csharp

using System;
using System.Collections.Concurrent;
using System.Threading;

public static bool isSoftStopRequested = false;

#!csharp

public interface ICommand
{
    void Execute();
}

#!csharp

public class HardStop : ICommand
{
    private Thread stoppingThread;

    public HardStop(Thread stoppingThread)
    {
        this.stoppingThread = stoppingThread;
    }

    public void Execute()
    {
        if (stoppingThread != Thread.CurrentThread)
        {
            throw new Exception("HardStop cannot be executed in non-target thread");
        }
        stoppingThread.Interrupt();
    }
}

#!csharp

public class SoftStop : ICommand
{
    private BlockingCollection<ICommand> commandQueue;
    private Thread stoppingThread;

    public SoftStop(BlockingCollection<ICommand> commandQueue, Thread stoppingThread)
    {
        this.commandQueue = commandQueue;
        this.stoppingThread = stoppingThread;
    }

    public void Execute()
    {
        if (stoppingThread != Thread.CurrentThread)
        {
            throw new Exception("SoftStop cannot be executed in non-target thread");
        }

        if(isSoftStopRequested){
        while (commandQueue.Count > 0)
            {
                ICommand command = commandQueue.Take();
                command.Execute();
            }
        }
    }
}

#!csharp

public static class ExceptionHandler
{
    public static void Handle(Exception exception, ICommand command){
        Console.WriteLine("Exception " + exception + " caught while trying to execute next command: " + command.GetType().Name);
    }
}

#!csharp

public class ServerThread
{
    public BlockingCollection<ICommand> commandQueue = new BlockingCollection<ICommand>();

    public Thread mainThread;

    public ServerThread()
    {
        mainThread = new Thread(Run);

        mainThread.Start();
    }

    public void Run()
    {

        while ((commandQueue.Count > 0) && (!isSoftStopRequested))
        {
            ICommand command = commandQueue.Take();
            try
            {
                if(command is SoftStop) isSoftStopRequested = true;
                command.Execute();
            }
            catch (Exception exception)
            {
                ExceptionHandler.Handle(exception, command);
            }
        }
    }

    public void AddCommand(ICommand command)
    {
        commandQueue.Add(command);
    }
}

#!csharp

public class TestCommand : ICommand
{
    public void Execute()
    {
        Console.WriteLine("Server is doing smth...");
    }
}

#!csharp

ServerThread serverThread = new ServerThread();

serverThread.AddCommand(new TestCommand());
serverThread.AddCommand(new TestCommand());
//Thread.Sleep(10);
/*try
{
    serverThread.AddCommand(new HardStop(serverThread.mainThread));
}
catch(Exception exception)
{
    Console.WriteLine(exception.Message);
}*/

serverThread.AddCommand(new SoftStop(serverThread.commandQueue, serverThread.mainThread));

serverThread.AddCommand(new TestCommand());

serverThread.mainThread.Join();
